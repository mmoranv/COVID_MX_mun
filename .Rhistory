library(dplyr) # manipulate dataframes
library(readr) # read/write dataframes
library(tidyr) # reshaping dataframes
library(stringr) # string manipulation
library(forcats) # factor manipulation
library(purrr) # iteration (instead of loops)
library(ggplot2) # making plots
install.packages(dplyr) # manipulate dataframes
install.packages(readr) # read/write dataframes
install.packages(tidyr) # reshaping dataframes
install.packages(stringr) # string manipulation
install.packages(forcats) # factor manipulation
install.packages(purrr) # iteration (instead of loops)
install.packages(ggplot2) # making plots
install.packages("dplyr")
install.packages("readr") # read/write dataframes
install.packages("tidyr") # reshaping dataframes
install.packages("stringr") # string manipulation
install.packages("forcats") # factor manipulation
install.packages("purrr") # iteration (instead of loops)
install.packages("ggplot2") # making plots
install.packages("readr") # read/write dataframes
install.packages("tidyr") # reshaping dataframes
install.packages("stringr") # string manipulation
install.packages("forcats") # factor manipulation
install.packages("purrr") # iteration (instead of loops)
install.packages("ggplot2") # making plots
library(dplyr) # manipulate dataframes
library(readr) # read/write dataframes
library(tidyr) # reshaping dataframes
library(stringr) # string manipulation
library(forcats) # factor manipulation
library(purrr) # iteration (instead of loops)
library(ggplot2) # making plots
capricorn_clients_01232019 <- read_csv("DATA/Capricorn_011719.csv")
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("ggmap")
install.packages("sp")
#Exportados:
#C:\Users\Mariano\Documents\ArcGIS\MEX\COVID_19_SSA_Mex\EXPORTED
library(tidyverse)
library(lubridate)
library(gganimate)
library(gifski)
library(reshape2)
library(rgdal)
library(maptools)
library(leaflet)
library(sf)
library(ggplot2)
library(dplyr)
setwd("C:/Users/Mariano/Documents/GitHub/COVID_MX_mun/")
#Clean up dates from official data excel, to be in YY-MM-DD format
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20220402.csv" %>%
read_csv() %>%
rename(
id = cve_ent,
pop = poblacion,
mun = nombre
) %>%
pivot_longer(
cols = matches("\\d{2}/\\d{2}/\\d{2}"), #los pivotes seran solo columnas que parezcan fechas, tuve que modificar manualmente para que las fechas sean leidas como MES-DIA-AÑO
names_to = "fecha",
names_transform = list(fecha = dmy),
values_to = "casos_nuevos", #alargar (mas filas) el dataset agregando un valor/una fila por cada municipio + fecha
values_transform = list(fecha = as.integer)
) %>%
arrange(id, fecha) %>%
group_by(id) %>% #agrupar por municipio
mutate(casos_acum = cumsum(casos_nuevos)) %>% #cumsum, suma acumulada
mutate(casos_acum_ajustados = 100000 * (cumsum(casos_nuevos)/pop)) %>% #ajustada por poblacion
ungroup()
#Clean up dates from official data excel, to be in YY-MM-DD format
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20220402.csv"# %>%
str(casos_covid_municipio)
#Clean up dates from official data excel, to be in YY-MM-DD format
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20220402.csv" %>%
read_csv() #%>%
str(casos_covid_municipio)
#Clean up dates from official data excel, to be in YY-MM-DD format
#casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20220402.csv" %>%
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20200628.csv" %>%
read_csv() %>%
rename(
id = cve_ent,
pop = poblacion,
mun = nombre
) %>%
pivot_longer(
cols = matches("\\d{2}/\\d{2}/\\d{2}"), #los pivotes seran solo columnas que parezcan fechas, tuve que modificar manualmente para que las fechas sean leidas como MES-DIA-AÑO
names_to = "fecha",
names_transform = list(fecha = dmy),
values_to = "casos_nuevos", #alargar (mas filas) el dataset agregando un valor/una fila por cada municipio + fecha
values_transform = list(fecha = as.integer)
) %>%
arrange(id, fecha) %>%
group_by(id) %>% #agrupar por municipio
mutate(casos_acum = cumsum(casos_nuevos)) %>% #cumsum, suma acumulada
mutate(casos_acum_ajustados = 100000 * (cumsum(casos_nuevos)/pop)) %>% #ajustada por poblacion
ungroup()
str(casos_covid_municipio)
#Replace "-" by "/" before anything
#Clean up dates from official data excel, to be in MM-DD-YY format
#casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20220402.csv" %>%
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20200628.csv" %>%
read_csv() #%>%
str(casos_covid_municipio)
#Manually replace "-" by "/" before anything, it's just easier
#Clean up dates from official data excel, to be in MM-DD-YY format
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20220402.csv" %>%
#casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20200628.csv" %>%
read_csv() %>%
rename(
id = cve_ent,
pop = poblacion,
mun = nombre
) %>%
pivot_longer(
cols = matches("\\d{2}/\\d{2}/\\d{2}"), #los pivotes seran solo columnas que parezcan fechas, tuve que modificar manualmente para que las fechas sean leidas como MES-DIA-AÑO
names_to = "fecha",
names_transform = list(fecha = dmy),
values_to = "casos_nuevos", #alargar (mas filas) el dataset agregando un valor/una fila por cada municipio + fecha
values_transform = list(fecha = as.integer)
) %>%
arrange(id, fecha) %>%
group_by(id) %>% #agrupar por municipio
mutate(casos_acum = cumsum(casos_nuevos)) %>% #cumsum, suma acumulada
mutate(casos_acum_ajustados = 100000 * (cumsum(casos_nuevos)/pop)) %>% #ajustada por poblacion
ungroup()
str(casos_covid_municipio)
View(casos_covid_municipio)
covid_cases_mun <- "DATA/Casos_Diarios_Municipio_Confirmados_20220402.csv" %>%
read_csv() %>%
rename(
id = cve_ent, # Municipality ID
pop = poblacion, # Municipality population
mun = nombre # Municipality name
) %>% # using pivot_longer allows to make a "longer dataset", adding a row per each municipality per each day, this will allow to iteratively map only certain rows/dates for all municipalities
pivot_longer(
cols = matches("\\d{2}/\\d{2}/\\d{2}"), #I'll pivot the data establishing columns as ONLY those fields resembling a regex date
names_to = "date",
names_transform = list(date = dmy),
values_to = "new_cases", #each value added to a row is the registered value on that date
values_transform = list(date = as.integer)
) %>%
arrange(id, date) %>% #order by id and date
group_by(id) %>% #group by municipality
mutate(accumulated_cases = cumsum(new_cases)) %>% #cumsum, accumulated sum
mutate(accumulated_cases_adj = 100000 * (cumsum(new_cases)/pop)) %>% #adjust for population
ungroup()
str(covid_cases_mun)
covid_cases_mun$accumulated_cases_adj <- as.numeric(format(covid_cases_mun$accumulated_cases_adj, digits=2, nsmall=2)) #round
str(covid_cases_mun)
str(covid_cases_mun$accumulated_cases_adj)
#via sf
shapefile_mun <- st_read(dsn = "C:/Users/Mariano/Documents/ArcGIS/MEX/Marco geoestadistico/municipios.shp") %>%
st_transform(4326) #Coordinate system
#######Join data to map
cases_by_mun <- shapefile_mun %>%
mutate(id = cve_num) %>%
full_join(covid_cases_mun, by = "id")
#dates sample
dates <- unique(cases_by_mun$date)
dates[0]
dates[[0]]
dates[1]
dates[483]
#select all municiplaities for only the sample dates
mex_sample <- cases_by_mun %>%
filter(date %in% c(sample_dates))
#Basic map
mex_test <- cases_by_mun %>%
filter(date == "2020-06-27")
sample_dates <- dates[100:300]
#select all municiplaities for only the sample dates
mex_sample <- cases_by_mun %>%
filter(date %in% c(sample_dates))
#Basic map
mex_test <- cases_by_mun %>%
filter(date == "2020-06-27")
#Testing the map only for one date
mapa <- ggplot() +
#geom_sf(data = municipios_sf, colour = "black", fill = "white") +
#geom_sf(data = mex_sample, aes(fill(accumulated_cases_adj, frame = date)))+
#geom_sf(data = mex_sample, aes(fill(accumulated_cases_adj)))+
geom_sf(data = mex_test, size = .1)+
aes(fill = accumulated_cases_adj) +
theme_void() + #removes the default theme
theme_light(base_line_size = .1) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", guide = "legend") +
labs(title = "COVID-19: Casos confirmados en México por municipio",
subtitle = mex_test$date,
caption = "Source: Secretaría de Salud, 2020")
#Testing the map only for one date
map_test <- ggplot() +
geom_sf(data = mex_test, size = .1)+ #border size
aes(fill = accumulated_cases_adj) + #variable to be mapped
theme_void() + #removes the default theme
theme_light(base_line_size = .1) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", guide = "legend") + #color scale
labs(title = "COVID-19: Confirmed Cases per municipality",
subtitle = mex_test$date,
caption = "Source: Secretaría de Salud, 2020-2022")
map_test
#Base municipality map
map_mun <- ggplot() +
geom_sf(data = municipios_sf, colour = "black", fill = "white")
#Base municipality map
map_mun <- ggplot() +
geom_sf(data = shapefile_mun, colour = "black", fill = "white")
map_mun
#Base municipality map
map_mun <- ggplot() +
geom_sf(data = shapefile_mun, colour = "black", fill = "white", size = .1)
#Populated municipality map
cases_by_mun_map <- ggplot() +
geom_sf(data = mex_sample, size = .1)+
aes(fill = accumulated_cases_adj) +
theme_void() + #removes the default theme
theme_light(base_line_size = .1) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", guide = "legend") +
labs(title = "COVID-19: Casos confirmados en México por municipio",
subtitle = mex_test$date,
caption = "Source: Secretaría de Salud, 2020") +
transition_manual(date)
#Populated municipality map
cases_by_mun_map <- ggplot() +
geom_sf(data = mex_sample, size = .1)+
aes(fill = accumulated_cases_adj) +
theme_void() + #removes the default theme
theme_light(base_line_size = .1) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", guide = "legend") +
labs(title = "COVID-19: Casos confirmados en México por municipio",
subtitle = mex_test$date,
caption = "Source: Secretaría de Salud, 2020") +
transition_manual(date)
animate(cases_by_mun_map, duration = 10, fps = 10, width = 1000, height = 960, renderer = gifski_renderer()) #each frame is a map
#Populated municipality map
cases_by_mun_map <- ggplot() +
geom_sf(data = mex_sample, size = .1)+
aes(fill = accumulated_cases_adj) +
theme_void() + #removes the default theme
theme_light(base_line_size = .1) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", guide = "legend") +
labs(title = "COVID-19: Confirmed Cases per municipality",
subtitle = mex_test$date,
caption = "Source: Secretaría de Salud, 2020") +
transition_manual(date) #iterative along date
animate(cases_by_mun_map, duration = 10, fps = 10, width = 1000, height = 960, renderer = gifski_renderer()) #each frame is a map
anim_save("covid-cases-plot.gif")
anim_save("MX_covid_cases_2022_03_31.gif")
####################################################################################
####################################################################################
##########################    4.EXPORT     #########################################
####################################################################################
####################################################################################
####################################################################################
write.csv(covid_cases_mun, "DATA/covid_cases_mun_04_03_22.csv")
